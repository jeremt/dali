
BaseVisitor = require("./base")

# @class FormatterVisitor
# Handle the convertion of an ast node to a glsl source code. It also handle
#     the code formatting (minification, number of tabulations...).
#
class FormatterVisitor extends BaseVisitor

  @getSource: (node, kw) ->
    new FormatterVisitor().getSource(node, kw)

  # Return a string which contains the generated GLSL source code for the given
  #     AST node, well formatted according the given paramters.
  # @param {String} tab the string used for tabulations
  # @param {Boolean} minified wheter the compiled code should be minified
  #
  getSource: (node, {@tab, @minified} = {}) ->
    @tab ?= '  '
    @minified ?= false
    @_sourceCode = ""
    @_indentLevel = 0
    @visitNode(node)
    @_sourceCode

  _addNewLine: ->
    if @minified then return ""
    @_sourceCode += "\n"
    for i in [0...@_indentLevel]
      @_sourceCode += @tab

  _addOperator: (op) ->
    @_sourceCode += if @minified then op else " #{op} "

  _addLeftBrace: ->
    if @minified
      @_sourceCode += "{"
    else
      @_sourceCode += " {"
      @_addNewLine()

  _addRightBrace: (newline = true) ->
    if @minified
      @_sourceCode += "}"
    else
      # Remove the tabulation generated by the last statement.
      @_sourceCode = @_sourceCode.substr(0, @_sourceCode.length - @tab.length)
      @_sourceCode += "}"
      if newline
        @_addNewLine()

  _addComma: ->
    @_sourceCode += if @minified then "," else ", "

  _addSemicolon: (newline = true) ->
    @_sourceCode += ";"
    unless @minified
      if newline
        @_addNewLine()
      else
        @_sourceCode += " "

  onRoot: (node) ->
    for statement in node.statements
      @visitNode(statement)

  onFunctionDeclaration: (node) ->
    @visitNode(node.returnType)
    @_sourceCode += " "
    @_sourceCode += node.name
    @_sourceCode += "("
    isFirst = true
    for parameter in node.parameters
      if isFirst is true
        isFirst = false
      else
        @_addComma()
      @visitNode(parameter)
    @_sourceCode += ")"
    @visitNode(node.body)

  onParameter: (node) ->
    @_sourceCode += node.type_name
    @_sourceCode += " "
    @_sourceCode += node.name

  onReturn: (node) ->
    @_sourceCode += "return "
    @visitNode(node.value)
    @_addSemicolon()

  onScope: (node) ->
    @_indentLevel += 1
    @_addLeftBrace()
    @visitNodes(node.statements)
    @_indentLevel -= 1
    @_addRightBrace()

  onExpression: (node) ->
    @visitNode(node.expression)
    @_addSemicolon()

  onFunctionCall: (node) ->
    @_sourceCode += node.function_name
    @_sourceCode += "("
    isFirst = true
    for parameter in node.parameters
      if isFirst is true
        isFirst = false
      else
        @_addComma()
      @visitNode(parameter)
    @_sourceCode += ")"

  onDeclarator: (node, newline) ->
    @visitNode(node.typeAttribute)
    @_sourceCode += " "
    @visitNodes(node.declarators)
    @_addSemicolon(newline)

  onDeclaratorItem: (node) ->
    @visitNode(node.name)
    if node.initializer?
      @_addOperator("=")
      @visitNode(node.initializer)

  onIfStatement: (node) ->
    @_sourceCode += if @minified then "if(" else "if ("
    @visitNode(node.condition)
    @_sourceCode += ")"
    if node.body.type isnt "scope"
      @_indentLevel += 1
      @_addNewLine()
      @_indentLevel -= 1
    @visitNode(node.body)
    if node.elseBody?
      @_sourceCode += "else "
      unless node.elseBody.type in ["if_statement", "scope"]
        @_indentLevel += 1
        @_addNewLine()
        @_indentLevel -= 1
      @visitNode(node.elseBody)

  onForStatement: (node) ->
    @_sourceCode += if @minified then "for(" else "for ("
    @visitNode(node.initializer, false)
    @visitNode(node.condition)
    @_addSemicolon(false)
    @visitNode(node.increment)
    @_sourceCode += ")"
    # TODO(jeremie) handle when its not a scope, it should be done in a generic
    #     way to work with if and while as well.
    @visitNode(node.body)

  onStructDefinition: (node) ->
    @_sourceCode += "struct "
    @_sourceCode += node.name
    @_indentLevel += 1
    @_addLeftBrace()
    for member in node.members
      @visitNode(member)
    @_indentLevel -= 1
    @_addRightBrace(false)
    @_addSemicolon()

  onBinary: (node) ->

    # TODO(jeremie) we add parenthesis to ensure the operators priority.
    #     However, it would be better to do it only when it is needed.

    if node.operator.operator in ["+", "-"]
      @_sourceCode += "("
    @visitNode(node.left)
    @_sourceCode += if @minified then "" else " "
    @visitNode(node.operator)
    @_sourceCode += if @minified then "" else " "
    @visitNode(node.right)
    if node.operator.operator in ["+", "-"]
      @_sourceCode += ")"

  onUnary: (node) ->
    @visitNode(node.operator)
    @visitNode(node.expression)

  onPostfix: (node) ->
    @visitNode(node.expression)
    @visitNode(node.operator)

  onFieldSelector: (node) ->
    @_sourceCode += "."
    @_sourceCode += node.selection

  onOperator: (node) ->
    @_sourceCode += node.operator

  onIdentifier: (node) -> @_sourceCode += node.name

  onType: (node) ->
    if node.qualifier?
      @_sourceCode += node.qualifier + " "
    if node.precision?
      @_sourceCode += node.precision + " "
    @_sourceCode += node.name

  onInt:   (node) -> @_sourceCode += node.value
  onBool:  (node) -> @_sourceCode += node.value
  onFloat: (node) -> @_sourceCode += node.value

  onPreprocessor: (node) ->
    @_sourceCode += node.directive
    @_sourceCode += " "

    if node.identifier?
      @_sourceCode += node.identifier

    if node.parameters?
      @_sourceCode += "("
      isFirst = true
      for parameter in node.parameters
        if isFirst is true
          isFirst = false
        else
          @_addComma()
        @visitNode(parameter)
      @_sourceCode += ")"

    if node.token_string?
      @_sourceCode += " "
      @_sourceCode += node.token_string

    if node.value?
      @_sourceCode += node.value

    if node.guarded_statements?
      @_addNewLine()
      @visitNodes(node.guarded_statements)
      @_sourceCode += "#endif"

    @_addNewLine()

module.exports = FormatterVisitor
